The hueristic I came up with first checks each column and compares the # of blocks in each of the current state 
and the goal state. If they had different # of blocks from the goal state. it added that value to the Heuristic
It then checks if the block is in the right column but incorrect position and adds 2. It also adds 1 if a block
is in the wrong position and column.
The last thing it checks if a block is in the right position but the block below it is in the wrong position and  adds 5. 
The hueristic is definitely not admissable.


For this
>>>>>>>>>>

DE
ABC
>>>>>>>>>>

CEDA
B
>>>>>>>>>>

The hueristic here would be 12  4 from the column + 6 for DE, and B being in right column but wrong position +2 for A and C being in wrong position and column.





The program was able to solve 25/45. There were certain cases where it found a solution at a larger depth than initially given.
It was unable to solve any problems that had 20 blocks. This was always due to it going over the max iterations which is probably linked to the depth the solution would be found at.
Having a higher max iterations may fix the problem. The number of goal tests and queue size seemed to scale exponentially. But it seems they were more dependent on what the hueristic 
for the states are.